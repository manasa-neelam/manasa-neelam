import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Create a sample dataset (you should replace this with your own data)
data = {
    'Socio_Economic_Status': ['High', 'Low', 'Medium', 'Medium', 'High', 'Low', 'Medium', 'High', 'Low'],
    'Age': [35, 45, 25, 18, 50, 28, 38, 60, 30],
    'Gender': ['Male', 'Female', 'Female', 'Male', 'Male', 'Female', 'Female', 'Male', 'Male'],
    'Survived': [1, 1, 0, 1, 1, 0, 0, 1, 0]  # 1 for saved, 0 for not saved
}

df = pd.DataFrame(data)

# Encode categorical features
df = pd.get_dummies(df, columns=['Socio_Economic_Status', 'Gender'], drop_first=True)

# Split the dataset into features (X) and target (y)
X = df.drop('Survived', axis=1)
y = df['Survived']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train a Random Forest Classifier
clf = RandomForestClassifier(random_state=42)
clf.fit(X_train, y_train)

# Make predictions
y_pred = clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

print(f'Accuracy: {accuracy}')
print('Classification Report:')
print(report)

# Use the trained model to make predictions for new data
new_data = pd.DataFrame({
    'Socio_Economic_Status': ['High'],
    'Age': [40],
    'Gender': ['Male']
})

# Encode the new data
new_data = pd.get_dummies(new_data, columns=['Socio_Economic_Status', 'Gender'], drop_first=True)

# Make a prediction for the new data
prediction = clf.predict(new_data)
if prediction[0] == 1:
    print('The person is likely to be saved from sinking.')
else:
    print('The person is not likely to be saved from sinking.')


